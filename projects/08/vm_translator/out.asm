@256
D=A
@SP
A=D
@return-address.0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return-address.0)
// ../FunctionCalls/FibonacciElement/Main.vm:11 function Main.fibonacci 0
(../FunctionCalls/FibonacciElement/Main.vm.Main.fibonacci)
// ../FunctionCalls/FibonacciElement/Main.vm:12 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:13 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:14 lt                     // checks if n<2
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@LT.0.true
D;JLT
(LT.0.false)
@SP
A=M
M=0
@LT.0.end
0;JMP
(LT.0.true)
@SP
A=M
M=-1
(LT.0.end)
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:15 if-goto IF_TRUE
@SP
AM=M-1
D=M
@../FunctionCalls/FibonacciElement/Main.vm.$IF_TRUE
D;JNE
// ../FunctionCalls/FibonacciElement/Main.vm:16 goto IF_FALSE
@../FunctionCalls/FibonacciElement/Main.vm.$IF_FALSE
0;JMP
// ../FunctionCalls/FibonacciElement/Main.vm:17 label IF_TRUE          // if n<2, return n
(../FunctionCalls/FibonacciElement/Main.vm.$IF_TRUE)
// ../FunctionCalls/FibonacciElement/Main.vm:18 push argument 0        
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:19 return
// ../FunctionCalls/FibonacciElement/Main.vm:20 label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(../FunctionCalls/FibonacciElement/Main.vm.$IF_FALSE)
// ../FunctionCalls/FibonacciElement/Main.vm:21 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:22 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:23 sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:24 call Main.fibonacci 1  // computes fib(n-2)
@return-address.1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return-address.1)
// ../FunctionCalls/FibonacciElement/Main.vm:25 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:26 push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:27 sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:28 call Main.fibonacci 1  // computes fib(n-1)
@return-address.2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return-address.2)
// ../FunctionCalls/FibonacciElement/Main.vm:29 add                    // returns fib(n-1) + fib(n-2)
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
AM=M+1
// ../FunctionCalls/FibonacciElement/Main.vm:30 return
