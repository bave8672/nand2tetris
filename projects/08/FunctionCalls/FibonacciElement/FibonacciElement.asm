// Compiled VM code -> hack
// {"config":{"emitSys":false}}
// init SP
@256
D=A
@SP
A=D
// Main.vm:11 function Main.fibonacci 0
(Main.vm.Main.fibonacci)
// Main.vm:12 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:13 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:14 lt                     // checks if n<2
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@LT.0.true
D;JLT
(LT.0.false)
@SP
A=M
M=0
@LT.0.end
0;JMP
(LT.0.true)
@SP
A=M
M=-1
(LT.0.end)
@SP
AM=M+1
// Main.vm:15 if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.vm.$IF_TRUE
D;JNE
// Main.vm:16 goto IF_FALSE
@Main.vm.$IF_FALSE
0;JMP
// Main.vm:17 label IF_TRUE          // if n<2, return n
(Main.vm.$IF_TRUE)
// Main.vm:18 push argument 0        
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:19 return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
A=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Main.vm:20 label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(Main.vm.$IF_FALSE)
// Main.vm:21 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:22 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:23 sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
// Main.vm:24 call Main.fibonacci 1  // computes fib(n-2)
@return-address.0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return-address.0)
// Main.vm:25 push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:26 push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// Main.vm:27 sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
// Main.vm:28 call Main.fibonacci 1  // computes fib(n-1)
@return-address.1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return-address.1)
// Main.vm:29 add                    // returns fib(n-1) + fib(n-2)
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
AM=M+1
// Main.vm:30 return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
A=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Sys.vm:11 function Sys.init 0
(Sys.vm.Sys.init)
// Sys.vm:12 push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// Sys.vm:13 call Main.fibonacci 1   // computes the 4'th fibonacci element
@return-address.2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return-address.2)
// Sys.vm:14 label WHILE
(Sys.vm.$WHILE)
// Sys.vm:15 goto WHILE              // loops infinitely
@Sys.vm.$WHILE
0;JMP
